// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// generator dto {
//   provider = "prisma-class-validator-generator"
//   output   = "../src/global/models"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  ethAddress        String       @unique
  email             String?      @unique
  nonce             String
  roomConfigs       RoomConfig[]
  hostedExperiances Experience[]
  sharedExperiances Experience[] @relation(name: "shared_experiances")
}

model Experience {
  id                  Int                @id @default(autoincrement())
  expTitle            String
  expDescription      String?
  participantsAllowed Int?
  roomId              String?
  roomCreationTime    DateTime?
  tokenGatedRoom      Boolean
  tokenGatedRecording Boolean
  ownerId             Int
  owner               User               @relation(fields: [ownerId], references: [id])
  hosts               User[]             @relation(name: "shared_experiances")
  roomConfig          RoomConfig?
  recordingMetadata   RecordingMetadata?
  recordings          Recording[]
  experianceStats     ExperianceStats?
}

model RoomConfig {
  id              Int      @id @default(autoincrement())
  roomTitle       String
  roomDescription String?
  startTime       DateTime
  expiryTime      DateTime
  hostWallets     User[]
  roomLocked      Boolean  @default(true)
  muteOnEntry     Boolean  @default(true)
  videoOnEntry    Boolean  @default(true)

  // token gated room configs
  tokenType       TokenType?
  chain           Chain?
  contractAddress String?
  conditionType   ConditionType?
  conditionValue  String?
  experience      Experience     @relation(fields: [experienceId], references: [id])
  experienceId    Int            @unique
}

model RecordingMetadata {
  id                  Int        @id @default(autoincrement())
  chain               Chain?
  tokenType           TokenType?
  contractAddress     String?
  tokenGatedRecording Boolean
  experience          Experience @relation(fields: [experienceId], references: [id])
  experienceId        Int        @unique
}

model Recording {
  id             Int        @id @default(autoincrement())
  dateRecorded   DateTime
  url            String?
  recTitle       String
  recDescription String
  Experience     Experience @relation(fields: [experienceId], references: [id])
  experienceId   Int
  recContractId  Int?
}

model ExperianceStats {
  id               Int              @id @default(autoincrement())
  experianceStatus ExperianceStatus @default(FINISHED)
  totalRatings     Int              @default(0)
  overallRating    Int              @default(5)
  startTime        DateTime
  expiryTime       DateTime
  lastMeet         DateTime?
  experience       Experience       @relation(fields: [experienceId], references: [id])
  experienceId     Int              @unique
}

enum ExperianceStatus {
  ONGOING
  FINISHED
}

enum Chain {
  ETHEREUM
  COSMOS
  SOLANA
  TEZOS
  BSC
  FILECOIN_HYPERSPACE
}

enum TokenType {
  ERC20
  ERC721
  ERC1155
  SPL
  BEP20
  REC20
}

enum ConditionType {
  FOLLOW_HANDLE
  HAVE_HANDLE
}
